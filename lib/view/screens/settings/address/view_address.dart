import 'dart:math';import 'package:e_commerce_project/controller/settings_controller/address.dart';import 'package:e_commerce_project/core/functions/statusRequest.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';class AddressScreen extends StatelessWidget {  const AddressScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    Get.lazyPut(() => AddressController());    return GetBuilder<AddressController>(      // assignId: true,      builder: (logic) {     if (logic.statusRequest  == StatusRequest.init ||logic.statusRequest ==  StatusRequest.success)     {       return Scaffold(         appBar: AppBar(           actions: [             IconButton(               onPressed: () {                 logic.view_address();               },               icon: Icon(Icons.refresh),             ),           ],           title: Text(             'Address',             style: Get.textTheme.headline1,           ),           leading: IconButton(               icon: Icon(Icons.arrow_back_ios_new),               onPressed: () {                 Get.back();               }),         ),         floatingActionButton: FloatingActionButton(           backgroundColor: Colors.deepOrange,           onPressed: () {             logic.go_to_add_address_screen();           },           child: Icon(Icons.add_home_outlined, size: 30),         ),         body: Container(           margin: EdgeInsets.all(10),           child: logic.addresses.isEmpty               ? Center(child: Text('Nothing Address'))               : ListView.separated(             // reverse: true,             physics: BouncingScrollPhysics(),             itemBuilder: (context, index) {               return Container(                 alignment: Alignment.center,                 margin: EdgeInsets.all(15),                 padding: EdgeInsets.all(5),                 // height: 150,                 decoration: BoxDecoration(                   borderRadius: BorderRadius.circular(20),                   color: Colors.black26,                 ),                 child: Column(                   mainAxisAlignment: MainAxisAlignment.center,                   crossAxisAlignment: CrossAxisAlignment.start,                   children: [                     txt(  logic.addresses[index]['address_name'].toString(),),                     txt(  logic.addresses[index]['address_city'].toString(),),                     txt(  logic.addresses[index]['address_street'].toString(),),                     txt(  logic.addresses[index]['address_id'].toString(),),                   ],                 ),               );             },             separatorBuilder: (context, index) {               return Container(                 margin: EdgeInsets.symmetric(horizontal: 50),                 height: 1,                 color: Colors.black38,                 // width: Get.width-150,               );             },             itemCount: logic.addresses.length,           ),         ),       );     }     else if (logic.statusRequest == StatusRequest.loading){       return SafeArea(child: Center(         child: CircularProgressIndicator(),       ));     }        else        {         return Scaffold(           body: Center(             child: Text('Error'),           ),         );        }      },    );  }}Widget txt(String txt ){  return Text(txt,style: TextStyle(    color: Colors.white60,fontSize: 18  ),);}