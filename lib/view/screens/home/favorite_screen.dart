import 'dart:math';import 'package:cached_network_image/cached_network_image.dart';import 'package:e_commerce_project/controller/items/favorite.dart';import 'package:e_commerce_project/core/constant/AppLinkData.dart';import 'package:e_commerce_project/core/functions/statusRequest.dart';import 'package:e_commerce_project/data/data_source/static/static.dart';import 'package:flutter/material.dart';import 'package:get/get_state_manager/src/simple/get_state.dart';import 'package:get/get.dart';import 'package:lottie/lottie.dart';import 'package:pull_to_refresh/pull_to_refresh.dart';class FavoriteScreen extends StatelessWidget {  const FavoriteScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    Get.lazyPut(() => FavoriteController());    return Scaffold(      body: GetBuilder<FavoriteController>(        builder: (logic) {          if (logic.statusRequest == StatusRequest.init ||              logic.statusRequest == StatusRequest.success) {            if (logic.items_favorite.isEmpty) {              return Center(                child: Column(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Text('Favorite Empty !',style: Get.textTheme.headline1!.copyWith(                      fontFamily: 'Cairo'                    ),),                    Lottie.asset('assets/lottie/empty3.zip'),                  ],                ),              );            } else {              return SmartRefresher(                  enablePullDown: true,                  enablePullUp: true,                  header: WaterDropMaterialHeader(),                  controller: logic.refreshController,                  onRefresh: logic.onRefresh,                  onLoading: logic.onLoading,                  child: ListView(                // dragStartBehavior:DraggableScrollableActuatorI()  ,                children: [                  Padding(                    padding: const EdgeInsets.all(10),                    child: GridView.builder(                      shrinkWrap: true,                      physics: NeverScrollableScrollPhysics(),                      itemCount: logic.items_favorite.length,                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(                          crossAxisCount: 2, childAspectRatio: 0.7),                      itemBuilder: (context, index) {                        return InkWell(                          onTap: () {                            logic.go_to_product_details(index);                          },                          child: Card(                            child: Padding(                              padding: EdgeInsets.all(5                              ),                              child: Column(                                mainAxisAlignment: MainAxisAlignment.center,                                // crossAxisAlignment: CrossAxisAlignment.start,                                children: [                                  SizedBox(                                    child: Hero(                                        tag: logic.items_favorite[index].itemId                                            .toString(),                                        child: CachedNetworkImage(                                          imageUrl: AppLinkData.image_items +                                              '/' +                                              logic.items_favorite[index]                                                  .itemImage                                                  .toString(),                                        )),                                    height: 120,                                  ),                                  Text(                                    is_en == true                                        ? '${logic.items_favorite[index].itemName}'                                        : '${logic.items_favorite[index].itemNameAr}',                                    style: Get.textTheme.bodyText1!.copyWith(                                      fontSize: 16,                                    ),                                  ),                                  SizedBox(                                    height: 5,                                  ),                                  Text(                                      textAlign: TextAlign.start,                                      maxLines: 2,                                      is_en == true                                          ? '${logic.items_favorite[index].itemDesc}'                                          : '${logic.items_favorite[index].itemDescAr}',                                      overflow: TextOverflow.ellipsis,                                      // textAlign: TextAlign.start,                                      style: Get.textTheme.bodyText1!.copyWith(                                        height: 1.1,                                      )),                                  Expanded(                                      child: Row(                                    mainAxisAlignment: MainAxisAlignment.center,                                    crossAxisAlignment:                                        CrossAxisAlignment.center,                                    children: [                                      Text(                                        '${logic.items_favorite[index].itemPrice}',                                        style: TextStyle(                                          color: Colors.deepOrange[300],                                          fontSize: 20,                                          fontWeight: FontWeight.w600,                                          fontFamily: '',                                        ),                                      ),                                      Spacer(),                                      // IconButton(                                      //   splashRadius: 15,                                      //   splashColor: Colors.white70,                                      //   color: Colors.grey[300],                                      //   onPressed: () {},                                      //   icon: logic.items_favorite[index].favorite == 0                                      //       ? Icon(Icons.favorite_border_outlined)                                      //       : Icon(                                      //     Icons.favorite,                                      //     color: Colors.red,                                      //   ),                                      // ),                                      IconButton(                                          splashRadius: 15,                                          splashColor: Colors.white70,                                          color: Colors.grey[300],                                          onPressed: () {                                            //                                            //                                            //                                            logic.delete_favorite(logic                                                .items_favorite[index].itemId!);                                            //                                            //                                            //                                          },                                          icon: Icon(                                            Icons.favorite,                                            color: Colors.red,                                          ))                                    ],                                  )),                                ],                              ),                            ),                          ),                        );                      },                    ),                  ),                ],              ));            }          }          if (logic.statusRequest == StatusRequest.failure) {            return Center(              child: Text('Error'),            );          }          if (logic.statusRequest == StatusRequest.loading) {            return Center(              child: CircularProgressIndicator(),            );          }          return Center(            child: Text('Error'),          );        },      ),    );  }}